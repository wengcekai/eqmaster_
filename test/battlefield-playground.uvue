<template>
	<view class="container" @click="handleContainerClick">
		<image class="background-image" src="/static/battlefield/background.png" mode="aspectFill" />
		<view class="overlay"></view>

		<!-- Navbar -->
		<view class="navbar" :class="{ shadowed: shouldShadow }">
			<image class="back-button" src="/static/battlefield/back-iconpng.png"></image>
			<reward-bar :gemCount="100"></reward-bar>
			<view class="setting-group">
				<image class="setting-item" src="/static/battlefield/copy.png"></image>
				<image class="setting-item" src="/static/battlefield/setting.png"></image>
			</view>
		</view>

		<!-- NPC Group -->
		<view class="npc-group" :class="{ shadowed: shouldShadow }">
			<npc-status v-for="npc in npcs" :key="npc.characterName" :health="npc.health" :avatar="npc.avatar"
				:characterName="npc.characterName">
			</npc-status>
		</view>

		<!-- Chat History -->
		<view class="chat-history-container" :class="{ shadowed: shouldShadow }">
			<template v-for="(chat, index) in chattingHistory">
				<self-chat-box v-if="chat.sender === 'user'" :key="index" :wording="chat.content"></self-chat-box>
				<npc-chat-box v-else-if="chat.sender === 'npc'" :key="'npc-' + index" :avatar="chat.avatar"
					:name="chat.name" :dialog="chat.content"></npc-chat-box>
				<tipping-chat-box v-else-if="chat.sender === 'tipping'" :key="'tipping' + index"
					:tip="chat.content"></tipping-chat-box>
			</template>
		</view>

		<!-- NPC Talk -->
		<view v-if="state === 'NpcTalk'" class="npc-talk-container">
			<large-avatar-bubble :avatar="npcs[talkingNpc].avatar" :character="npcs[talkingNpc].characterName"
				:wording="chattingHistory[displayedNpcChatIndex].content"></large-avatar-bubble>
		</view>

		<!-- Player Actions -->
		<view class="player-action-container" :class="{ shadowed: shouldShadow }">
			<view class="action-item" v-if="!isRecording" @click="showInput = true; focusInput = true;">
				<image class="action-icon" src="/static/battlefield/keyboard.png"></image>
			</view>
			<view class="middle-container">
				<view class="action-item action-item-middle" @touchstart="handleClickRecording"
					@touchend="handleRecordingDone">
					<image class="action-icon action-icon-middle" src="/static/battlefield/microphone.png"></image>
				</view>
			</view>
			<view class="action-item" v-if="!isRecording">
				<image class="action-icon" src="/static/battlefield/streamline.png" @click="clickHintButton"></image>
			</view>
		</view>

		<!-- Tipping Card -->
		<view v-if="showTippingCard" class="tipping-card">
			<tipping :quit="handleTippingQuit" :hint="hint" :help="help"></tipping>
		</view>


		<!-- Keyboard Input -->
		<view class="keyboard-container">
			<view v-if="showInput" class="input-container">
				<input type="text" :focus="focusInput" placeholder="请输入..." @blur="showInput = false" />
			</view>
		</view>

		<!-- Judge Component -->
		<view class="judge-container" v-if="state==='judge'">
			<judge :title="'well done'" :wording="'做的很好，考虑了大家的感受'" @judge="handleJudgeContinue" :good-judge="true">
			</judge>
		</view>

	</view>
</template>

<script>
	import RewardBar from "/components/RewardBar.vue";
	import NpcStatus from '../../components/NpcStatus.vue';
	import LargeAvatarBubble from '../../components/LargeAvatarBubble.vue';
	import Judge from '../../components/Judge.vue';
	import Tipping from '../../components/Tipping.vue';
	import TippingChatBox from '../../components/TippingChatBox.vue';
	import SelfChatBox from '../../components/SelfChatBox.vue';
	import NpcChatBox from '../../components/NpcChatBox.vue';

	export default {
		components: {
			RewardBar,
			NpcStatus,
			LargeAvatarBubble,
			Judge,
			Tipping,
			TippingChatBox,
			SelfChatBox,
			NpcChatBox,
		},
		data() {
			return {
				currentScene: 0,
				task1Finished: false,
				task1: '一句话让同事们赞不绝口',
				task2Finished: false,
				task2: '情绪过山车',
				state: '', // Current state
				showTippingCard: false, // Controls the tipping card visibility
				talkingNpc: 0,
				displayedNpcChatIndex: 0, // Tracks the last displayed NPC chat
				npcDialog: 'NPC dialogue here', // Replace with actual dialogue
				// Other data properties
				someoneTalk: true,
				state: 'NpcTalk', // Current state
				chattingHistory: [
					{
						sender: 'npc',
						name: '老板',
						avatar: '/static/battlefield/boss.png',
						content:
							'唉，我最近有点上火，医生嘱咐我要清淡饮食。这些重口味的菜我可真不敢吃了，不然怕是吃完嘴上火气就更旺了。',
					}
				],
				talkingNpc: 0,
				showInput: false,
				focusInput: false,
				npcs: [
					{
						characterName: '老板',
						health: 80,
						avatar: '/static/battlefield/boss.png',
					},
					{
						characterName: '同事A',
						health: 49,
						avatar: '/static/battlefield/xiaoA.png',
					},
					{
						characterName: '同事B',
						health: 90,
						avatar: '/static/battlefield/xiaoB.png',
					},
				],
				recorderManager: null, // 录音管理器实例
				recording: false, // 录音状态
				tempFilePath: '', // 临时录音文件路径
				isRecording: false, // Controls the display state of left and right icons
			};
		},
		methods: {
			handleClickRecording() {
				this.isRecording = true; // 隐藏两侧图标
				this.startRecording();
			},
			startRecording() {
				const options = {
					duration: 60000, // 最大录音时长，单位 ms，这里设置为 60 秒
					sampleRate: 44100, // 采样率
					numberOfChannels: 1, // 录音通道数
					encodeBitRate: 192000, // 编码码率
					format: 'mp3', // 音频格式，有效值：aac/mp3
					frameSize: 50, // 指定帧大小，单位 KB
				};
				this.recorderManager.start(options);
				this.recording = true;
			},
			handleRecordingDone() {
				console.log('Released');
				this.isMiddleClicked = false;
				this.state = "Evaluating";
				this.stopRecording();
			},

			stopRecording() {
				if (this.recording) {
					this.recorderManager.stop();
					this.recording = false;
				}
			},
			playRecording() {
				if (this.tempFilePath) {
					const innerAudioContext = uni.createInnerAudioContext();
					innerAudioContext.src = this.tempFilePath;
					innerAudioContext.play();
					innerAudioContext.onPlay(() => {
						console.log('开始播放录音');
					});
					innerAudioContext.onError((err) => {
						console.error('播放录音出错', err);
					});
				}
			},
			uploadRecording() {
				if (this.tempFilePath) {
					uni.uploadFile({
						url: 'https://your-server.com/upload', // 替换为您的上传接口
						filePath: this.tempFilePath,
						name: 'file',
						success: (uploadFileRes) => {
							console.log('上传成功', uploadFileRes);
						},
						fail: (err) => {
							console.error('上传失败', err);
						},
					});
				}
			},
			getNextState() {
				if (this.state === 'NpcTalk' && this.chattingHistory.length === 0) {
					console.log('Dismiss npc');
					this.state = 'userTalk';
				} else {
					// Other state transitions
				}
			},
			handleJudgeContinue(goodJudge) {
				console.log('Judge continue clicked.');
				if (goodJudge) {
					this.state = 'NpcTalk';
				} else {
					this.state = 'userTalk';
				}
			},
			handleTippingQuit() {
				console.log('Clicked quit tipping');
				this.state = 'userTalk'; // Change state
			},
			help() {
				console.log('Choose help card');
			},
			hint() {
				console.log('Choose hint card');
			},
			clickHintButton() {
				this.state = 'hint';
			},
			dismissNpcTalk() {
				let foundNpcMessage = false;
				const history = this.chattingHistory;
				for (let i = this.displayedNpcChatIndex + 1; i < history.length; i++) {
					if (history[i].sender === 'npc') {
						// Found the next NPC message
						this.displayedNpcChatIndex = i;
						this.talkingNpc = this.getNpcIndexByName(history[i].name);
						this.npcDialog = history[i].content;
						foundNpcMessage = true;
						break;
					}
				}
				if (!foundNpcMessage) {
					// No more NPC messages; change state to 'userTalk'
					console.log("no more npc, now user turn.")
					this.state = 'userTalk';
				}
			},

			// Helper method to get NPC index by name
			getNpcIndexByName(name) {
				return this.npcs.findIndex(npc => npc.characterName === name);
			},

			handleContainerClick() {
				if (this.state === 'NpcTalk') {
					this.dismissNpcTalk();
				}
				// If needed, handle clicks in other states
			},
			initRecorderManager() {
				this.recorderManager.onStart(() => {
					console.log('Recorder start');
				});
				this.recorderManager.onPause(() => {
					console.log('Recorder pause');
				});
				this.recorderManager.onStop((res) => {
					console.log('Recorder stop', res);
					this.tempFilePath = res.tempFilePath;
					this.playRecording();
					// 您可以在这里处理录音文件，例如播放或上传
				});
				this.recorderManager.onError((err) => {
					console.error('Recorder error', err);
				});
			},
		},
		created() {
			console.log('Current platform:', process.env.UNI_PLATFORM);
			// #ifdef APP
			console.log("======start to initiate recorder manager");
			console.log('uni:', uni)
			this.recorderManager = uni.getRecorderManager();
			this.initRecorderManager();
			console.log("======recorder manager:", this.recorderManager);
			// #endif		
		},
		computed: {
			shouldShadow() {
				return (
					this.state === 'NpcTalk' ||
					this.isRecording ||
					this.showTippingCard
				);
			},
		}
	};
</script>


<style scoped>
	@import "./common.css";

	.container {
		position: relative;
		width: 100%;
		height: 100%;
		color: #fff;
	}

	.navbar {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		padding: 20rpx;
		position: relative;
		z-index: 3;
		margin-top: 80rpx;
		margin-left: 20rpx;
	}

	.back-button {
		width: 24px;
		height: 24px;
		margin-left: 20rpx;
	}

	.content {
		padding: 20px;
		text-align: center;
		position: relative;
		z-index: 3;
		display: flex;
		justify-content: center;
		align-items: center;
		margin-top: 200rpx;
	}

	.time-info {
		font-size: 16px;
		color: #bbb;
		margin-bottom: 20px;
	}

	.description {
		font-size: 16px;
		line-height: 1.6;
		color: #fff;
	}

	.content-item {
		margin-top: 30rpx;
	}

	.setting-group {
		display: flex;
		flex-direction: row;
	}

	.setting-item {
		width: 24px;
		margin-right: 20rpx;
		height: 24px;
	}

	.npc-group {
		display: flex;
		flex-direction: row;
		z-index: 3;
		justify-content: space-around;
		margin-top: 50rpx;
	}

	.player-action-container {
		display: flex;
		flex-direction: row;
		width: 100%;
		justify-content: space-around;
		z-index: 3;
		overflow: visible;
		position: absolute;
		bottom: 50rpx;
	}

	.action-icon {
		width: 30px;
		height: 30px;
	}

	.action-icon-middle {
		width: 40px;
		height: 40px;
	}

	.action-item {
		width: 40px;
		height: 40px;
		border-radius: 20px;
		background: rgba(253, 237, 200, 1);
		display: flex;
		justify-content: center;
		align-items: center;
	}

	.action-item-middle {
		width: 50px;
		height: 50px;
		border-radius: 25px;
		background: linear-gradient(180deg, rgba(253, 242, 211, 1) 0%, rgba(241, 188, 116, 1) 100%);
	}

	.middle-container {
		width: 56px;
		height: 56px;
		border-radius: 28px;
		background-color: transparent;
		border: 2rpx solid rgba(253, 242, 211, 1);
		display: flex;
		justify-content: center;
		align-items: center;
		box-shadow: 0px 0px 4px 0px rgba(254, 211, 151, 1);
	}

	.npc-talk-container {
		width: 100%;
		z-index: 4;
		background-color: transparent;
		position: absolute;
		top: 30%;
	}

	.shadowed {
		z-index: 2;
	}

	.input-container {
		position: fixed;
		width: 80%;
		left: 10%;
		bottom: 200rpx;
		/* 将其固定在屏幕底部 */
		display: flex;
		justify-content: center;
		padding: 10px 0;
		/* 增加一些内边距 */
		background-color: rgba(255, 255, 255, 0.9);
		/* 可选的背景色，用于强调输入框 */

	}

	.keyboard-container {
		width: 100%;
		display: flex;
		flex-direction: row;
		justify-content: center;
	}

	.judge-container {
		width: 100%;
		z-index: 3;
		position: absolute;
		height: 300px;
		bottom: 0px;
	}

	.tipping-card {
		z-index: 3;
	}

	.chat-history-container {
		z-index: 3;
		width: 100%;
		display: flex;
		flex-direction: column;
		/* Ensure messages stack vertically */
		align-items: center;
		/* Align messages to the start */
	}

	.input-field {
		width: 80%;
		height: 40px;
		/* 确保高度适当 */
		padding: 10px;
		font-size: 16px;
		border: 1px solid #ccc;
		border-radius: 5px;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
	}

	.navbar.shadowed,
	.npc-group.shadowed,
	.chat-history-container.shadowed,
	.player-action-container.shadowed {
		opacity: 0.5;
	}
</style>